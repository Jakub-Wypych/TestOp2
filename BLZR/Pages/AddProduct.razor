@page "/add-product"
@using ProductApp
@using ProductApp.Models
@inject IProductService ProductService

<h1>Add New Product</h1>

<div class="mb-3">
    <label for="productName" class="form-label">Product Name</label>
    <input type="text" id="productName" class="form-control @(string.IsNullOrWhiteSpace(newProduct.Name) && invalidSubmit ? "is-invalid" : "")"
           @bind="newProduct.Name" placeholder="Enter product name" />
    @if (string.IsNullOrWhiteSpace(newProduct.Name) && invalidSubmit)
    {
        <div class="invalid-feedback">Product Name is required.</div>
    }
</div>

<div class="mb-3">
    <label for="productDate" class="form-label">Product Date</label>
    <input type="date" id="productDate" class="form-control"
           @bind="newProduct.Date" />
</div>

<div class="mb-3">
    <label for="productPrice" class="form-label">Product Price</label>
    <input type="number" id="productPrice" class="form-control @(newProduct.Price < 0 && invalidSubmit ? "is-invalid" : "")"
           @bind="newProduct.Price" placeholder="Enter product price" min="0" />
    @if (newProduct.Price < 0 && invalidSubmit)
    {
        <div class="invalid-feedback">Product Price must be greater or equal than 0.</div>
    }
</div>

<div class="mb-3">
    <label for="Category" class="form-label">Product Category</label>
    <input type="text" id="productCategory" class="form-control @(string.IsNullOrWhiteSpace(newProduct.Category) && invalidSubmit ? "is-invalid" : "")"
           @bind="newProduct.Category" placeholder="Enter product category" />
    @if (string.IsNullOrWhiteSpace(newProduct.Category) && invalidSubmit)
    {
        <div class="invalid-feedback">Product Category is required.</div>
    }
</div>

<div class="mb-3">
    <label for="stockQuantity" class="form-label">Stock Quantity</label>
    <input type="number" id="stockQuantity" class="form-control @(newProduct.Quantity < 0 && invalidSubmit ? "is-invalid" : "")"
           @bind="newProduct.Quantity" placeholder="Enter stock quantity" min="0" />
    @if (newProduct.Quantity < 0 && invalidSubmit)
    {
        <div class="invalid-feedback">Stock Quantity must be greater or equal than 0.</div>
    }
</div>

<button class="btn btn-primary" @onclick="OnAddNewProductClick">Add Product</button>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private Product newProduct = new Product();
    private bool invalidSubmit = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        newProduct.Date = DateTime.Now.Date;
    }

    private async Task OnAddNewProductClick()
    {
        invalidSubmit = false;
        successMessage = string.Empty;
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newProduct.Name) ||
            newProduct.Price < 0 ||
            string.IsNullOrWhiteSpace(newProduct.Category) ||
            newProduct.Quantity < 0)
        {
            invalidSubmit = true;
            return;
        }

        var response = await ProductService.AddProductAsync(newProduct);

        if (response.Success)
        {
            successMessage = response.Message;
            newProduct = new Product { Date = DateTime.Now.Date };
        }
        else
        {
            errorMessage = response.Message;
        }
    }
}
