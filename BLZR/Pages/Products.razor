@page "/products"
@using ProductApp
@using ProductApp.Models
@inject IProductService ProductService

<h3>Product List</h3>

@if (loading)
{
    <div>Loading products...</div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products != null && products.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Price</th>
                <th>Category</th>
                <th>Stock (Quantity)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Date.ToString("MM-dd-yyyy")</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Category</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToEdit(product.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(product)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div>No products available.</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<Product>? products;
    private string? errorMessage;
    private string successMessage = string.Empty;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await ProductService.GetProductsAsync();
            if (response.Success)
            {
                products = response.Data.ToList();
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading products: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void NavigateToEdit(int productId)
    {
        NavigationManager.NavigateTo($"/edit-product/{productId}");
    }

    private async Task ConfirmDelete(Product product)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the product '{product.Name}'?"))
        {
            await DeleteProduct(product);
        }
    }

    private async Task DeleteProduct(Product product)
    {
        try
        {
            var response = await ProductService.DeleteProductAsync(product.Id);
            if (response.Success)
            {
                products?.Remove(product);
                successMessage = response.Message;
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting the product: {ex.Message}";
        }
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
